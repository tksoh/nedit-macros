##########################################################
# EditorConfig macro for NEdit
#
# Syntax reference:
#    https://editorconfig-specification.readthedocs.io/
#
# By TK Soh (teekaysoh@gmail.com), Jan-2021
##########################################################

debug = 1       # print debugging messages on terminal

if (debug >= 1)
    t_print("Loading .editorconfig for " $file_name "\n")

# gather parent directories to check for .editorconfig
path = replace_in_string($file_path, "/$", "" , "regex", "copy")
dir_list = split(path, "/")
path = ""
for (i=0; i<dir_list[]; i++) {
    fn = dir_list[i]
    path = path fn "/"
    if (debug >= 3)
        t_print("Dir level " i ": " fn " => " path "\n")
    path_list[i] = path
}

# start searching for .editorconfig
configfile  = ".editorconfig"
file_count = 0
for (i=0; i<path_list[]; i++) {
    fn = path_list[] - i -1
    fullpath = path_list[fn] configfile
    if (debug >= 2)
        t_print("checking file: " fullpath "\n")

    config = read_file(fullpath)
    if ($read_status == 1) {
        if (debug >= 2)
            t_print("- Found\n")
        file_list[file_count] = fullpath
        file_count++

        # stop looking if this file is root (root=true)
        root = search_string(config, "^\\s*root\\s*=\\strue>", 0, "regex")
        if (root != -1) {
            if (debug >= 2)
                t_print("- root=true\n")
            break
        }
    }
}

if (file_count < 1) {
    t_print("\nCan't find " configfile " in all parent directories\n")
    return
}

# process config files from top to bottom
for (i=0; i<file_count; i++) {
    fn = file_count - i -1
    config_path = file_list[fn]
    if (debug >= 1)
        t_print("===========\nParsing file #" fn ": " config_path "\n")

    # read config data
    config = read_file(config_path)

    # flag if file is root (root=true)
    root = search_string(config, "^\\s*root\\s*=\\strue>", 0, "regex")
    if (root != -1) {
        if (debug >= 1)
            t_print("root=true\n")
    }

    # start processing .editorconfig data
    file_matched = 0
    line_num = 0
    use_num_range = 0

    while (1) {
        regexp = "^(.*)(\\r\\n|\\r|\\n)"
        found = search_string(config, regexp, 0, "regex")
        if (found == -1)
            break

        line_num++

        # extract current and trim config data for next loop
        line = substring(config, found, $search_end)
        config = substring(config, $search_end)
        line = replace_in_string(line, "[\\r\\n]+", "", "regex")    # chomp
        if (debug >= 2) {
            t_print("LINE #" line_num ": " line "\n")
        }

        ### parse line and process per data found

        # skip comment and blank lines
        comment = search_string(line, "^\\s*[#;]", 0, "regex")
        if (comment != -1) {
            if (debug >= 2)
                t_print("line is comment\n")
            continue
        }

        blanks = search_string(line, "^\\s*[\r\n]", 0, "regex")
        if (blanks != -1) {
            if (debug >= 2)
                t_print("line is blank\n")
            continue
        }

        # check sections
        regexp = "\\[(.+)\\]"
        found = search_string(line, regexp, 0, "regex")
        if (found != -1) {
            # extract glob pattern for conversion to regexp
            section = substring(line, found, $search_end)
            glob = replace_in_string(section, regexp, "\\1", "regex")
            if (debug >= 2)
                t_print("glob: " glob "\n")

            # convert brace extention
            regexp = "(.*)\\{(.+)\\}(.*)"
            found = search_string(glob, regexp, 0, "regex")
            if (found != -1) {
                # extract content inside {}
                braced = replace_in_string(glob, regexp, "\\2", "regex")
                if (debug >= 2)
                    t_print("brace: " braced "\n")

                # capture number range
                use_num_range = 0
                num_regexp = "^([+-]?\\d+)\\.\\.([+-]?\\d+)"
                num_range = search_string(braced, num_regexp, 0, "regex")
                if (num_range != -1) {
                    use_num_range = 1
                    start_num = replace_in_string(braced, num_regexp, "\\1", "regex")
                    stop_num = replace_in_string(braced, num_regexp, "\\2", "regex")
                    braced_regexp = "\\1(\\\\d+)\\3"
                    glob = replace_in_string(glob, regexp, braced_regexp, "regex")
                }

                # replace commas with vertical bar
                comma2or = replace_in_string(braced, ",", "|")
                if (comma2or != "") {
                    # replace [] with regexp
                    braced_regexp = "\\1<(" comma2or ")>\\3"
                    glob = replace_in_string(glob, regexp, braced_regexp, "regex")
                }

                if (debug >= 2)
                    t_print("glob (brace): " glob "\n")
            }

            # convert []
            regexp = "(.*)\\[(.+)\\](.*)"
            found = search_string(glob, regexp, 0, "regex")
            if (found != -1) {
                # extract content inside {}
                braced = replace_in_string(glob, regexp, "\\2", "regex")
                if (debug >= 2)
                    t_print("brace: " braced "\n")

                # convert '!'
                carrot = replace_in_string(braced, "!", "^")
                if (carrot != "") {
                    braced_regexp = "\\1[" carrot "]\\3"
                    replaced = replace_in_string(glob, regexp, braced_regexp, "regex")
                    if (replaced != "") {
                        if (debug >= 2)
                            t_print("glob (brace): " replaced "\n")
                        glob = replaced
                    }
                }
            }

            # convert regular globs
            replaced = replace_in_string(glob, ".", "\\.")
            if (replaced != "") {
                glob = replaced
                if (debug >= 2)
                    t_print("glob (.): " glob "\n")
            }
            replaced = replace_in_string(glob, "?", ".")
            if (replaced != "") {
                glob = replaced
                if (debug >= 2)
                    t_print("glob (?): " glob)
            }
            replaced = replace_in_string(glob, "*", ".*?")
            if (replaced != "") {
                glob = replaced
                if (debug >= 2)
                    t_print("glob (*): " glob "\n")
            }

            # wrap up regexp
            replaced = replace_in_string(glob, "(.*)", "^\\1$", "regex")
            if (replaced != "") {
                glob = replaced
                if (debug >= 2)
                    t_print("glob (wrap): " glob "\n")
            }

            # check file name against glob pattern
            found = search_string($file_name, glob, 0, "regex")
            if (found == -1) {
                file_matched = 0
            }
            else {
                if (use_num_range) {
                    num = replace_in_string($file_name, glob, "\\1", "regex")
                    if (debug >= 2)
                        t_print("checking if " num " in " start_num ".." stop_num "\n")
                    if (num >= start_num && num <= stop_num)
                        file_matched = 1
                    else
                        file_matched = 0
                }
                else {
                    file_matched = 1
                }
            }

            if (debug >= 1) {
                if (file_matched)
                    t_print($file_name " matches " section "\n")
                else
                    t_print($file_name " does not match " section "\n")
            }
        }

        # check & apply properties if file matches section pattern
        if (!file_matched)
            continue

        # get property pairs
        regexp = "(\\w+)\\s*=\\s*(.+)"
        found = search_string(line, regexp, 0, "regex")
        if (found != -1) {
            key = replace_in_string(line, regexp, "\\1", "regex")
            value = replace_in_string(line, regexp, "\\2", "regex")
            if (debug >= 2)
                t_print("Property: " key " = " value "\n")
        }
        else {
            continue
        }

        # apply properties
        if (key == "tab_width") {
            if (debug >= 1)
                t_print("Applying: " key " = " value "\n")

            set_tab_dist(value)
        }
        else if (key == "indent_size") {
            if (debug >= 1)
                t_print("Applying: " key " = " value "\n")

            if ($em_tab_dist > 0)
                set_em_tab_dist(value)
            else
                set_tab_dist(value)
        }
        else if (key == "indent_style") {
            if (debug >= 1)
                t_print("Applying: " key " = " value "\n")

            indent_style = tolower(value)
            if (indent_style == "space") {
                if ($em_tab_dist <= 0)
                    set_em_tab_dist($tab_dist)
                set_use_tabs(0)
            }
            else if (indent_style == "tab") {
                if ($em_tab_dist > 0)
                    set_tab_dist($em_tab_dist)
                set_em_tab_dist(0)  # use hard tab to indent
                set_use_tabs(1)
            } else {
                t_print("Unknown indent_style: " indent_style "\n")
            }
        }
        else {
            if (debug >= 1)
                t_print("WARNING: property '" key "' not yet supported\n")
        }
    }
}
